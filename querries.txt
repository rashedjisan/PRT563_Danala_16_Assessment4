// Inputs: the emergency patient's ID
:param patientId => 1;

// Derive compatible blood groups from the recipient's blood type
MATCH (p:patient {PatientID: toInteger($patientId)})
WITH p,
CASE p.BloodType
  WHEN 'O-'  THEN ['O-']
  WHEN 'O+'  THEN ['O-','O+']
  WHEN 'A-'  THEN ['O-','A-']
  WHEN 'A+'  THEN ['O-','O+','A-','A+']
  WHEN 'B-'  THEN ['O-','B-']
  WHEN 'B+'  THEN ['O-','O+','B-','B+']
  WHEN 'AB-' THEN ['O-','A-','B-','AB-']
  WHEN 'AB+' THEN ['O-','O+','A-','A+','B-','B+','AB-','AB+']
END AS compatible

// Find compatible donors (other patients) and their last-known facility via appointments
MATCH (d:patient)
WHERE d.PatientID <> p.PatientID AND d.BloodType IN compatible
OPTIONAL MATCH (d)-[:scheduled]->(a)<-[:occurs_at]-(f:facility)
OPTIONAL MATCH (hp:HealthcareProvider)-[:attends]->(a)
WITH p, d, f, hp, a
RETURN
  p.PatientID            AS emergencyPatientID,
  p.BloodType            AS neededBloodType,
  d.PatientID            AS donorID,
  d.FirstName + ' ' + d.LastName AS donorName,
  d.BloodType            AS donorBloodType,
  coalesce(f.FacilityName,'N/A')  AS facility,
  coalesce(hp.ProviderID,'N/A')   AS contactProvider,
  a.AppointmentID        AS appointmentRef
ORDER BY donorBloodType, donorName;